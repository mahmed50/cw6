import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';

class TaskListScreen extends StatefulWidget {
  @override
  _TaskListScreenState createState() => _TaskListScreenState();
}

class _TaskListScreenState extends State<TaskListScreen> {
  final _firestore = FirebaseFirestore.instance;
  String taskName = '';

  void addTask() {
    if (taskName.isNotEmpty) {
      _firestore.collection('tasks').add({
        'name': taskName,
        'completed': false,
        'priority': 'Medium',  // Default priority
      });
      setState(() {
        taskName = '';
      });
    }
  }

  void deleteTask(String taskId) {
    _firestore.collection('tasks').doc(taskId).delete();
  }

  void toggleComplete(String taskId, bool isCompleted) {
    _firestore.collection('tasks').doc(taskId).update({'completed': !isCompleted});
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Task Manager')),
      body: Column(
        children: [
          TextField(onChanged: (value) => taskName = value, decoration: InputDecoration(labelText: 'Task Name')),
          ElevatedButton(onPressed: addTask, child: Text('Add Task')),
          Expanded(
            child: StreamBuilder(
              stream: _firestore.collection('tasks').snapshots(),
              builder: (context, snapshot) {
                if (!snapshot.hasData) return CircularProgressIndicator();
                final tasks = snapshot.data.docs;
                return ListView.builder(
                  itemCount: tasks.length,
                  itemBuilder: (context, index) {
                    var task = tasks[index];
                    return ListTile(
                      title: Text(task['name']),
                      leading: Checkbox(
                        value: task['completed'],
                        onChanged: (value) => toggleComplete(task.id, task['completed']),
                      ),
                      trailing: IconButton(
                        icon: Icon(Icons.delete),
                        onPressed: () => deleteTask(task.id),
                      ),
                    );
                  },
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}
